name: CI - Notes App (per-job)

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/notes-app

jobs:
  unit_test:
    name: Unit tests (pytest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt','**/dev-requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt

      - name: Run pytest
        run: |
          pytest -q

  sast_bandit:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-bandit-${{ hashFiles('**/dev-requirements.txt') }}

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit

      - name: Run bandit scan
        run: |
          # scan the app folder recursively
          bandit -r app -n 5 -lll
        # bandit exits non-zero if issues found (so CI will fail)

  sca_pip_audit:
    name: SCA (pip-audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Run pip-audit
        run: |
          pip-audit -r requirements.txt

  secret_scan:
    name: Secret Scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Gitleaks (detect secrets)
        uses: zricethezav/gitleaks-action@v1
        with:
          args: detect --source . --verbose
        # gitleaks-action will exit non-zero if secrets found (failing the job)

  build_and_push:
    name: Build & Push Docker Image
    needs: [unit_test, sast_bandit, sca_pip_audit, secret_scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image (latest and commit-sha)
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            PIP_NO_CACHE_DIR=1

      - name: Output image tags
        run: |
          echo "Pushed ${{ env.IMAGE_NAME }}:latest and ${{ env.IMAGE_NAME }}:${{ github.sha }}"

  trivy_scan:
    name: Image Scan (Trivy) â€” scan image from Docker Hub
    runs-on: ubuntu-latest
    needs: [build_and_push]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub (for pulling the pushed image)
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Trivy scan (remote image)
        uses: aquasecurity/trivy-action@v0.43.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'summary'
          exit-code: '1'       # non-zero on vulnerabilities
          severity: 'CRITICAL,HIGH'   # fail only on high/critical
